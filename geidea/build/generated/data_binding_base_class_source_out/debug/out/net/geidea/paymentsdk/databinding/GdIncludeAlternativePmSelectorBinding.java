// Generated by view binder compiler. Do not edit!
package net.geidea.paymentsdk.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import net.geidea.paymentsdk.R;

public final class GdIncludeAlternativePmSelectorBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton alternativeMethodButton;

  @NonNull
  public final TextView alternativeMethodDividerTextView;

  @NonNull
  public final TextView alternativeMethodSelectorTitle;

  @NonNull
  public final ConstraintLayout constraintLayout;

  @NonNull
  public final View divider;

  @NonNull
  public final MaterialButton showAllMethodsButton;

  private GdIncludeAlternativePmSelectorBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton alternativeMethodButton,
      @NonNull TextView alternativeMethodDividerTextView,
      @NonNull TextView alternativeMethodSelectorTitle, @NonNull ConstraintLayout constraintLayout,
      @NonNull View divider, @NonNull MaterialButton showAllMethodsButton) {
    this.rootView = rootView;
    this.alternativeMethodButton = alternativeMethodButton;
    this.alternativeMethodDividerTextView = alternativeMethodDividerTextView;
    this.alternativeMethodSelectorTitle = alternativeMethodSelectorTitle;
    this.constraintLayout = constraintLayout;
    this.divider = divider;
    this.showAllMethodsButton = showAllMethodsButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static GdIncludeAlternativePmSelectorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static GdIncludeAlternativePmSelectorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.gd_include_alternative_pm_selector, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static GdIncludeAlternativePmSelectorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.alternativeMethodButton;
      MaterialButton alternativeMethodButton = ViewBindings.findChildViewById(rootView, id);
      if (alternativeMethodButton == null) {
        break missingId;
      }

      id = R.id.alternativeMethodDividerTextView;
      TextView alternativeMethodDividerTextView = ViewBindings.findChildViewById(rootView, id);
      if (alternativeMethodDividerTextView == null) {
        break missingId;
      }

      id = R.id.alternativeMethodSelectorTitle;
      TextView alternativeMethodSelectorTitle = ViewBindings.findChildViewById(rootView, id);
      if (alternativeMethodSelectorTitle == null) {
        break missingId;
      }

      ConstraintLayout constraintLayout = (ConstraintLayout) rootView;

      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.showAllMethodsButton;
      MaterialButton showAllMethodsButton = ViewBindings.findChildViewById(rootView, id);
      if (showAllMethodsButton == null) {
        break missingId;
      }

      return new GdIncludeAlternativePmSelectorBinding((ConstraintLayout) rootView,
          alternativeMethodButton, alternativeMethodDividerTextView, alternativeMethodSelectorTitle,
          constraintLayout, divider, showAllMethodsButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
